---
layout: "post"
title: "Circle puzzle"
date: "2018-05-01"
categories: type-theory
---

Moebius type family:

<p class="equation">
$$
\mathsf{rec}_{\mathbb{S}^1}\, \mathcal{U}\, 2\, (\mathsf{ua}(\mathsf{rec}_{2}\,2\,1_{2}\,0_{2})):
\mathbb{S}^1 \to \mathcal{U}.
$$
</p>

<div class="exercise">
Prove the equivalence of

<p class="equation">
$$\sum\,{\mathbb{S}^1}\,(\mathsf{rec}_{\mathbb{S}^1}\, \mathcal{U}\,  2\, (\mathsf{ua}(\mathsf{rec}_{2}2 1_{2} 0_{2}))) \simeq \mathbb{S}^1.$$
</p>
</div>

To solve this problem, let us recall the following results:

- The univalence axiom: for all $$A : \mathcal{U}$$ and $$B : \mathcal{U}$$,

<p class="equation">
$$
\mathsf{ua} : A\simeq B \to A =_{\mathcal{U}} B.
$$
</p>

- Circle is a higher inductive type generated by
    - a point $$\mathsf{base} : \mathbb{S}^1$$, and
    - a path $$\mathsf{loop} : \mathsf{base} \equiv \mathsf{base}$$
    - Theorem: $$ \mathsf{loop} \not \equiv \mathsf{refl}_{\mathsf{base}}$$

- The type for equivalence from $$A$$ to $$B$$

$$
  (A \simeq B) :\equiv \sum\limits_{f : A \to B} \mathsf{isequiv}(f),
$$

where

$$
\mathsf{isequiv(f)} :\equiv
  \left (\sum\limits_{g : B \to A} (f \circ g \sim \mathsf{id}_{B})\right) \times
  \left (\sum\limits_{h : B \to A} (h \circ f \sim \mathsf{id}_{A})\right).
$$

- The homotopy concept:

Let $$f , g : \prod\limits_{(x:A)} P(x)$$ be two sections of a
type family $$P : A \to \mathcal{U}$$. A **homotopy** from $$f$$ to $$g$$
is a dependent function of type

$$
(f \sim g) :\equiv \prod\limits_{x : A} (f(x) \equiv g(x)).
$$

![path-triangle](/assets/ipe-images/Bid.png)

## Experiment in Agda

Using HoTT-Agda:

\begin{code}
{-# OPTIONS --without-K #-}

open import HoTT

b : S¹
b = base

l : base == base
l = loop

id : Bool → Bool
id = λ z → z

neg : Bool → Bool
neg false = true
neg true  = false

id-equiv : Bool ≃ Bool
id-equiv = equiv id id helper helper
  where
    helper : (b : Bool) → id (id b) == b
    helper true  = ap id idp
    helper false = ap id idp

neg-equiv : Bool ≃ Bool
neg-equiv = equiv neg neg helper₁ helper₁
  where
    helper₁ : (b₁ : Bool) → neg (neg b₁) == b₁
    helper₁ false = ap neg idp
    helper₁ true  = ap neg idp

-- open import S₁Rec


B : S¹ → Type₀
B = S¹-rec Bool (ua neg-equiv)

-- (ua neg-equiv) x)

module RR = S¹Rec {A = Type₀} Bool (ua neg-equiv)

postulate
  eq1 : B base == Bool

y : Σ Bool (λ x → Π Bool (λ a → x == a))
y = (true , Bool-elim idp (apd {!!} {!!}))

\end{code}


### Exercises

<div class="exercise">
Prove $¬ (\prod\limitis_{(x : S^1)} B(x))$
</div>

<div class="exercise">
Fail proving that $(\prod\limitis_{(x : S^1)} x =_{S^1} \mathsf{base}$
</div>

- The circle is not contractible.
- B(base) is not contractible despite it's path-connected.


## References

{::options parse_block_html="true" /}
<div class="references">
- {% reference hottbook %}
</div>
{::options parse_block_html="false" /}
