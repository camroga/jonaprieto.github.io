---
layout: "post"
title: "Induction on Natural Numbers"
date: "2018-02-12 13:25"
---

We define the natural numbers by following its
algorithmic or finite definition, that is, using a
rule to construct the zero and a successor for any number.

\begin{code}
data ‚Ñï : Set where
  zero : ‚Ñï
  suc  : ‚Ñï ‚Üí ‚Ñï
\end{code}

* Remark: to be more comfortable with the usual notation let use
the following pragma:

\begin{code}
{-# BUILTIN NATURAL ‚Ñï #-}
\end{code}

Then, we can now write numbers like usual:

\begin{code}
bigNumber : ‚Ñï
bigNumber = 123456789
\end{code}

#### Recursion

Now let us define the principle of primitive recursion for natural numbers:

```agda
rec‚Ñï : Œ†(C : ùí∞) C ‚Üí (‚Ñï ‚Üí C ‚Üí C) ‚Üí ‚Ñï ‚Üí C
```
rec‚Ñï is the so-called *recursor* for natural numbers. In Agda,

\begin{code}
rec‚Ñï
  : (C : Set)    -- type for the outcome
  ‚Üí C            -- base case
  ‚Üí (‚Ñï ‚Üí C ‚Üí C)  -- recursion call
  ‚Üí ‚Ñï            -- the number in the input
  ‚Üí C            -- outcome
rec‚Ñï C c‚ÇÄ c‚Çõ zero = c‚ÇÄ
rec‚Ñï C c‚ÇÄ c‚Çõ (suc n) = c‚Çõ n (rec‚Ñï C c‚ÇÄ c‚Çõ n)
\end{code}

Now, we can define some common functions using this recursor to see how it works.

+ Adding two numbers.

\begin{code}
add : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
add = rec‚Ñï (‚Ñï ‚Üí ‚Ñï) (Œª m ‚Üí m) (Œª n g m ‚Üí suc (g m))
\end{code}

Instead of the usual add function:

\begin{code}
add‚ÇÇ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
add‚ÇÇ zero m = m
add‚ÇÇ (suc n) m = suc (add‚ÇÇ n m)
\end{code}

+ Doubling a number.

\begin{code}
double : ‚Ñï ‚Üí ‚Ñï
double = rec‚Ñï ‚Ñï 0 (Œª n y ‚Üí suc (suc y))
\end{code}

Instead of

\begin{code}
double‚ÇÇ : ‚Ñï ‚Üí ‚Ñï
double‚ÇÇ zero = zero
double‚ÇÇ n    = suc (suc n)
\end{code}

Before unpacking these definition, let test some examples. To this purpose we
import the equality definition type (_‚â°_) and its introduction rule (refl).

\begin{code}
open import Relation.Binary.PropositionalEquality using (refl; _‚â°_)
\end{code}

Then testing the definitional equality for some sums, we certaintly start to
believe.

\begin{code}
2+5 : add 2 5 ‚â° 7
2+5 = refl

25+25 : add 25 25 ‚â° 50
25+25 = refl
\end{code}

In the definition of `add` we have the following:

  + By [curryfication](https://en.wikipedia.org/wiki/Currying), the `add` function can
  be seen as a function that returns a function. How is this possible? just fix
  the first argument, and then you have an unary function, and that's why C : ‚Ñï ‚Üí ‚Ñï.

  ```agda
  add : ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï)
  ```

  + When the first argument in the sum is zero, we just have to return the
  identity function, that's why c‚ÇÄ is (Œª m ‚Üí m).

  ```agda
  add zero m = m
  ```

  + To understand the last argument, ((Œª n g m ‚Üí suc (g m))), remember that
  this is indeed c‚Çõ : ‚Ñï ‚Üí C ‚Üí C, and by the equation of rec‚Ñï:

  ```
  rec‚Ñï C c‚ÇÄ c‚Çõ (suc n) = c‚Çõ n (rec‚Ñï C c‚ÇÄ c‚Çõ n)
  ```

  Question: why the n variable is not present in the returned value?


#### Induction
