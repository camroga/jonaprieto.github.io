
\begin{code}
  -- Def.
  q₀ : (f ∘ g) pS₀ == id pS₀
  q₀ = p₀₁ · p₁₀
\end{code}

\begin{code}
  -- Def.
  q₁ : (f ∘ g) pS₁ == id pS₁
  q₁ = p₁₀ · p₀₁
\end{code}

{: .foldable until="2" }
\begin{code}
  -- Def.
  pover₁ : q₀ == q₁ [ (λ z → (f ∘ g) z == id z) ↓ p₀₁ ]
  pover₁ =
    (begin
      transport (λ z → (f ∘ g) z == id z) p₀₁ q₀
        ==⟨ transport-eq-fun (f ∘ g) id p₀₁ q₀ ⟩
      ! ap (f ∘ g) p₀₁ · q₀ · ap id p₀₁
        ==⟨ ap (! ap (f ∘ g) p₀₁ · q₀ ·_) (ap-id p₀₁) ⟩
      ! ap (f ∘ g) p₀₁ · q₀ · p₀₁
        ==⟨ ap (λ r → ! r · q₀ · p₀₁) (! ap-comp g f p₀₁) ⟩
      ! ap f (ap g p₀₁) · q₀ · p₀₁
        ==⟨ ap (λ r → ! ap f r · q₀ · p₀₁) (pS-βrec₀₁ (Σ S¹ (λ b → P b)) (ctp false) (ctp true) (ptp false) (ptp true)) ⟩
      ! ap f (ptp false) · q₀ · p₀₁
        ==⟨ ap (λ r → ! r · q₀ · p₀₁) lemma-ap-f-γ₀₁ ⟩
      ! p₀₁ · q₀ · p₀₁
        ==⟨ idp ⟩
      ! p₀₁ · (p₀₁ · p₁₀) · p₀₁
        ==⟨ ! (·-assoc (! p₀₁) p₀₁ p₁₀) |in-ctx (_· p₀₁) ⟩
      (! p₀₁ · p₀₁) · p₁₀ · p₀₁
        ==⟨ ·-linv p₀₁ |in-ctx (λ r → r · p₁₀ · p₀₁) ⟩
      idp · p₁₀ · p₀₁
        ==⟨⟩
      q₁
    ∎)
\end{code}

{: .foldable until="2" }
\begin{code}
  -- Def.
  pover₂ : q₁ == q₀ [ (λ z → (f ∘ g) z == id z) ↓ p₁₀ ]

  pover₂ =
    (begin
      transport (λ z → (f ∘ g) z == id z) p₁₀ q₁
        ==⟨ transport-eq-fun (f ∘ g) id p₁₀ q₁ ⟩
      ! ap (f ∘ g) p₁₀ · q₁ · ap id p₁₀
        ==⟨ ap (! ap (f ∘ g) p₁₀ · q₁ ·_) (ap-id p₁₀) ⟩
      ! ap (f ∘ g) p₁₀ · q₁ · p₁₀
        ==⟨ ap (λ r → ! r · q₁ · p₁₀) (! ap-comp g f p₁₀) ⟩
      ! ap f (ap g p₁₀) · q₁ · p₁₀
        ==⟨ ap (λ r → ! ap f r · q₁ · p₁₀)
               (pS-βrec₁₀ (Σ S¹ (λ b → P b)) (ctp false) (ctp true) (ptp false) (ptp true)) ⟩
      ! ap f (ptp true) · q₁ · p₁₀
        ==⟨ ap (λ r → ! r · q₁ · p₁₀) lemma-ap-f-γ₁₀ ⟩
      ! p₁₀ · q₁ · p₁₀
        ==⟨⟩
      ! p₁₀ · (p₁₀ · p₀₁) · p₁₀
        ==⟨ ! (·-assoc (! p₁₀) p₁₀ p₀₁) |in-ctx (_· p₁₀) ⟩
      (! p₁₀ · p₁₀) · p₀₁ · p₁₀
        ==⟨ ·-linv p₁₀ |in-ctx (λ r → r · p₀₁ · p₁₀) ⟩
      idp ·  p₀₁ · p₁₀
        ==⟨⟩
      q₀
    ∎)
\end{code}

Finally, our homotopy holds:

\begin{code}
  -- Homotopy
  f-g : f ∘ g ∼ id
  f-g = pS-ind (λ ps → (f ∘ g) ps == id ps) q₀ q₁ pover₁ pover₂
\end{code}


### `g ∘ f ∼ id`

This homotopy is a very more complex. To show that for all `x : S¹` it holds `g
(f x) == id x` we must proceed by induction three times. We perform this in the
following order: Sigma induction, Circle induction and `pS` induction.

Since the last two cases are induction on HITs, these inductions take into
account the action on their path constructors. We have taken inspiration to
finish this proof from Flattening lemma's proof in Section 6 in {% cite hottbook
%}.

By Sigma induction, we must to provide the uncurried function `g-f'` of `g-f : g
∘ f ∼ id`, that has type `Π (s : S¹) Π (b : P s).(g ∘ f) (s , b) == id (s , b)`.
Therefore, the next step is by induction on the circle. For the `base` case we
have `c` defined as fallows. For acting on paths, we define a short name `Q` for
the type family `λ z → (b : P z) → (g ∘ f) (z , b) == id (z , b)` in order to
get a pathover between `c` and itself along `loop` in the type family `Q`, this
path is `cpath`.  To define `cpath` we require a few auxiliary lemmas that
an interested reader can make them explicit by clicking on the helpers section
below. The equivalence follows by showing that `f` defines a quasiinverse
equivalence (`ΣS¹P-≃-pS`).

\begin{code}
  -- Def.
  c : (b : P base) → (g ∘ f) (base , b) == id (base , b)
  c true  = refl (base , true)
  c false = refl (base , false)
\end{code}

\begin{code}
  -- Def.
  Q : (s : S¹) → Type lzero
  Q = λ z → (b : P z) → (g ∘ f) (z , b) == id (z , b)
\end{code}

{: .foldable until="1" }
\begin{code}
  -- Helpers and auxiliar lemmas

  -- Def.
  auxAP : ∀ {x y : P base}{p : base == base}
      → (q : tr (λ x → P x) p x == y)
      →  ap (λ w → ctp w ) q == pair= (refl base , q)

  auxAP idp = idp

  stepFalse1
    : ∀ {x y : P base}
    → (q : tr (λ x → P x) loop x == y)
    → pair= (loop , refl (tr (λ z → P z) loop x)) · pair= (refl base , q) == pair= (loop , q)

  stepFalse1 {x = x} idp =
    begin
        pair= (loop , refl (tr (λ z → P z) loop x)) · pair= (refl base , idp)
    ==⟨ idp ⟩
        pair= (loop , refl (tr (λ z → P z) loop x)) · idp
    ==⟨ ! ·-runit (pair= (loop , refl (tr P loop x))) ⟩
        pair= (loop , refl (tr (λ z → P z) loop x))
    ==⟨ idp ⟩
        pair= (loop , idp)
    ∎

  stepFalse2
    : c (tr (λ x → P x) loop false)
      == tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₀₁)) (c (neg false))

  stepFalse2 = begin
    c (tr (λ x → P x) loop false)
      ==⟨ ! (apd (λ x → c x) (! γ₀₁)) ⟩
    tr (λ b → (g ∘ f) (base , b) == id (base , b)) (! γ₀₁) (c (neg false))
      ==⟨ transport-family (! γ₀₁) (c (neg false)) ⟩
    tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₀₁)) (c (neg false))
    ∎


  -- Def.
  p : (b : P base) → tr (λ w → (g ∘ f) w == id w) (ptp b) (c b) == c (neg b)

  p true  =
    begin
      tr (λ w → (g ∘ f) w == id w) (ptp true) (c true)
        ==⟨ idp ⟩
      tr (λ w → (g ∘ f) w == id w) (pair= (loop , γ₁₀)) idp
        ==⟨ transport-eq-fun (g ∘ f) id (pair= (loop , γ₁₀)) idp ⟩
      ! ap (g ∘ f) (pair= (loop , γ₁₀)) · idp · ap id (pair= (loop , γ₁₀))
        ==⟨ ap (λ r → ! (ap (g ∘ f) (pair= (loop , γ₁₀))) · idp · r) (ap-id (pair= (loop , γ₁₀))) ⟩
      ! ap (g ∘ f) (pair= (loop , γ₁₀)) · idp · (pair= (loop , γ₁₀))
        ==⟨ ap (λ r → r · pair= (loop , γ₁₀)) (! (·-runit (! ap (g ∘ f) (pair= (loop , γ₁₀))))) ⟩
      ! ap (g ∘ f) (pair= (loop , γ₁₀)) · (pair= (loop , γ₁₀))
        ==⟨ ap (λ r → ! r · pair= (loop , γ₁₀)) (! ap-comp f g (pair= (loop , γ₁₀))) ⟩
      ! ap g (ap f (pair= (loop , γ₁₀))) · (pair= (loop , γ₁₀))
        ==⟨ ap (λ r → ! ap g r · pair= (loop , γ₁₀)) lemma-ap-f-γ₁₀ ⟩
      ! ap g p₁₀ · (pair= (loop , γ₁₀))
        ==⟨ ap (λ r → ! r · pair= (loop , γ₁₀)) (pS-βrec₁₀ (Σ S¹ P) (base , false) (base , true) (ptp false) (ptp true)) ⟩
      ! (ptp true) · (pair= (loop , γ₁₀))
        ==⟨ idp ⟩
      ! (pair= (loop , γ₁₀)) · (pair= (loop , γ₁₀))
        ==⟨ ·-linv (pair= (loop , γ₁₀)) ⟩
      idp
    ∎

  p false =
    begin
      tr (λ w → (g ∘ f) w == id w) (ptp false) (c false)
        ==⟨ idp ⟩
      tr (λ w → (g ∘ f) w == id w) (pair= (loop , γ₀₁)) idp
        ==⟨ transport-eq-fun (g ∘ f) id (pair= (loop , γ₀₁)) idp ⟩
      ! ap (g ∘ f) (pair= (loop , γ₀₁)) · idp · ap id (pair= (loop , γ₀₁))
        ==⟨ ap (λ r → ! (ap (g ∘ f) (pair= (loop , γ₀₁))) · idp · r) (ap-id (pair= (loop , γ₀₁))) ⟩
      ! ap (g ∘ f) (pair= (loop , γ₀₁)) · idp · (pair= (loop , γ₀₁))
        ==⟨ ap (λ r → r · pair= (loop , γ₀₁)) (! (·-runit (! ap (g ∘ f) (pair= (loop , γ₀₁))))) ⟩
      ! ap (g ∘ f) (pair= (loop , γ₀₁)) · (pair= (loop , γ₀₁))
        ==⟨ ap (λ r → ! r · pair= (loop , γ₀₁)) (! ap-comp f g (pair= (loop , γ₀₁))) ⟩
      ! ap g (ap f (pair= (loop , γ₀₁))) · (pair= (loop , γ₀₁))
        ==⟨ ap (λ r → ! ap g r · pair= (loop , γ₀₁)) lemma-ap-f-γ₀₁ ⟩
      ! ap g p₀₁ · (pair= (loop , γ₀₁))
        ==⟨ ap (λ r → ! r · pair= (loop , γ₀₁)) (pS-βrec₀₁ (Σ S¹ P) (base , false) (base , true) (ptp false) (ptp true)) ⟩
      ! (ptp false) · (pair= (loop , γ₀₁))
        ==⟨ idp ⟩
      ! (pair= (loop , γ₀₁)) · (pair= (loop , γ₀₁))
        ==⟨ ·-linv (pair= (loop , γ₀₁)) ⟩
      idp
    ∎
  ------------------------------------------------------------------------------

  -- Def.
  stepFalse3 :
    tr (λ w → (g ∘ f) w == id w)
       ((pair= (loop , refl (tr (λ z → P z) loop false))) · ap  (λ x → ctp x) γ₀₁ )
       (c false) == c (neg false)

  stepFalse3  =
    begin
        tr (λ w → (g ∘ f) w == id w)
                  ( (pair= (loop , refl (tr (λ z → P z) loop false)))
                  · ap (λ x → ctp x) γ₀₁
                  )
                  (c false)
    ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) ((pair= (loop , refl (tr (λ z → P z) loop false))) · r ) (c false)) (auxAP {p = loop} γ₀₁) ⟩
     tr (λ w → (g ∘ f) w == id w)
                  ((pair= (loop , refl (tr (λ z → P z) loop false)))
                  ·  pair= (refl base , γ₀₁))
                  (c false)
    ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) r (c false)) (stepFalse1 γ₀₁) ⟩
        tr (λ w → (g ∘ f) w == id w)
                  (pair= (loop , γ₀₁))
                  (c false)
    ==⟨ p false ⟩
      c (neg false)
    ∎

  -- Def.
  stepFalse4 :
    tr (λ w → (g ∘ f) w == id w)
      (pair= (loop , refl (tr (λ z → P z) loop false)) · (ap (λ x → ctp x) (γ₀₁)) ) (c false)
      ==  c (neg false)
    →
    tr (λ w → (g ∘ f) w == id w)
      (pair= (loop , refl (tr (λ z → P z) loop false))) (c false)
    == tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₀₁)) (c (neg false))

  stepFalse4 p =
    begin
      tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop false))) (c false)
        ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) r (c false)) (·-runit (pair= (loop , refl (tr (λ z → P z) loop false)))) ⟩
      tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop false)) · idp) (c false)
        ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop false)) · r) (c false)) (! (·-rinv (ap (λ x → ctp x) (γ₀₁)))) ⟩
      tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop false)) · ((ap (λ x → ctp x) (γ₀₁)) · ! (ap (λ x → ctp x) (γ₀₁)))) (c false)
        ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) r (c false)) (! ·-assoc (pair= (loop , refl (tr (λ z → P z) loop false))) ((ap (λ x → ctp x) (γ₀₁))) (! (ap (λ x → ctp x) (γ₀₁)))) ⟩
      tr (λ w → (g ∘ f) w == id w) ( (pair= (loop , refl (tr (λ z → P z) loop false)) · ((ap (λ x → ctp x) (γ₀₁))) · ! (ap (λ x → ctp x) (γ₀₁)))) (c false)
        ==⟨ ! (transport-comp-h (pair= (loop , refl (tr (λ z → P z) loop false)) · ap (λ x → ctp x) γ₀₁) (! (ap (λ x → ctp x) (γ₀₁))) (c false)) ⟩
      tr (λ w → (g ∘ f) w == id w) (! (ap (λ x → ctp x) (γ₀₁))) (tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop false)) · ((ap (λ x → ctp x) (γ₀₁)))) (c false))
        ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) (! (ap (λ x → ctp x) (γ₀₁))) r) p ⟩
      tr (λ w → (g ∘ f) w == id w) (! (ap (λ x → ctp x) (γ₀₁))) (c (neg false))
        ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) r (c (neg false))) (! ap-inv (λ x → ctp x) γ₀₁) ⟩
      tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₀₁)) (c (neg false))
    ∎

  -- Def.
  stepFalse5 :
    tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop false))) (c false)
    == tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₀₁)) (c (neg false))

  stepFalse5 = stepFalse4 stepFalse3

  -- Def.
  stepTrue1
    : ∀ {x y : P base}
    → (q : tr P loop x == y)
    → pair= (loop , refl (tr P loop x)) · pair= (refl base , q) == pair= (loop , q)

  stepTrue1 {x = x} idp =
    begin
        pair= (loop , refl (tr P loop x)) · pair= (refl base , idp)
    ==⟨ idp ⟩
        pair= (loop , refl (tr P loop x)) · idp
    ==⟨ ! ·-runit (pair= (loop , refl (tr P loop x))) ⟩
        pair= (loop , refl (tr P loop x))
    ==⟨ idp ⟩
        pair= (loop , idp)
    ∎

  -- Def.
  stepTrue2
    : c (tr (λ x → P x) loop true)
      == tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₁₀)) (c (neg true))

  stepTrue2 = begin
    c (tr (λ x → P x) loop true)
      ==⟨ ! (apd (λ x → c x) (! γ₁₀)) ⟩
    tr (λ b → (g ∘ f) (base , b) == id (base , b)) (! γ₁₀) (c (neg true))
      ==⟨ transport-family (! γ₁₀) (c (neg true)) ⟩
    tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₁₀)) (c (neg true))
    ∎

  -- Def.
  stepTrue3
    : tr (λ w → (g ∘ f) w == id w)
         ((pair= (loop , refl (tr (λ z → P z) loop true))) · ap  (λ x → ctp x) γ₁₀ )
         (c true) == c (neg true)

  stepTrue3  =
    begin
        tr (λ w → (g ∘ f) w == id w)
                  ( (pair= (loop , refl (tr (λ z → P z) loop true)))
                  · ap (λ x → ctp x) γ₁₀
                  )
                  (c true)
    ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) ( (pair= (loop , refl (tr (λ z → P z) loop true))) · r ) (c true)) (auxAP {p = loop}  γ₁₀) ⟩
     tr (λ w → (g ∘ f) w == id w)
                  ((pair= (loop , refl (tr (λ z → P z) loop true)))
                  ·  pair= (refl base , γ₁₀))
                  (c true)
    ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) r (c true)) (stepTrue1 γ₁₀) ⟩
        tr (λ w → (g ∘ f) w == id w)
                  (pair= (loop , γ₁₀))
                  (c true)
    ==⟨ p true ⟩
      c (neg true)
    ∎

  -- Def.
  stepTrue4 :
    tr (λ w → (g ∘ f) w == id w)
      (pair= (loop , refl (tr (λ z → P z) loop true)) · (ap (λ x → ctp x) (γ₁₀)) ) (c true)
      ==  c (neg true)
    →
    tr (λ w → (g ∘ f) w == id w)
      (pair= (loop , refl (tr (λ z → P z) loop true))) (c true)
    == tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₁₀)) (c (neg true))

  stepTrue4 p =
    begin
      tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop true))) (c true)
        ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) r (c true)) (·-runit (pair= (loop , refl (tr (λ z → P z) loop true)))) ⟩
      tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop true)) · idp) (c true)
        ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop true)) · r) (c true)) (! (·-rinv (ap (λ x → ctp x) (γ₁₀)))) ⟩
      tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop true)) · ((ap (λ x → ctp x) (γ₁₀)) · ! (ap (λ x → ctp x) (γ₁₀)))) (c true)
        ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) r (c true)) (! ·-assoc (pair= (loop , refl (tr (λ z → P z) loop true))) ((ap (λ x → ctp x) (γ₁₀))) (! (ap (λ x → ctp x) (γ₁₀)))) ⟩
      tr (λ w → (g ∘ f) w == id w) ( (pair= (loop , refl (tr (λ z → P z) loop true)) · ((ap (λ x → ctp x) (γ₁₀))) · ! (ap (λ x → ctp x) (γ₁₀)))) (c true)
        ==⟨ ! (transport-comp-h (pair= (loop , refl (tr (λ z → P z) loop true)) · ap (λ x → ctp x) γ₁₀) (! (ap (λ x → ctp x) (γ₁₀))) (c true)) ⟩
      tr (λ w → (g ∘ f) w == id w) (! (ap (λ x → ctp x) (γ₁₀))) (tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop true)) · ((ap (λ x → ctp x) (γ₁₀)))) (c true))
        ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) (! (ap (λ x → ctp x) (γ₁₀))) r) p ⟩
      tr (λ w → (g ∘ f) w == id w) (! (ap (λ x → ctp x) (γ₁₀))) (c (neg true))
        ==⟨ ap (λ r → tr (λ w → (g ∘ f) w == id w) r (c (neg true))) (! ap-inv (λ x → ctp x) γ₁₀) ⟩
      tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₁₀)) (c (neg true))
    ∎

  -- Def.
  stepTrue5
    : tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop true))) (c true)
      == tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₁₀)) (c (neg true))

  stepTrue5 = stepTrue4 stepTrue3

  -- Def.
  helper
    : (b : P base)
    → tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop b)))
      (c b) == c (tr (λ x → P x) loop b)

  helper false =
      begin
        tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop false))) (c false)
          ==⟨ stepFalse5 ⟩
        tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₀₁)) (c (neg false))
          ==⟨ ! stepFalse2 ⟩
        c (tr (λ x → P x) loop false)
      ∎

  helper true =
      begin
          tr (λ w → (g ∘ f) w == id w) (pair= (loop , refl (tr (λ z → P z) loop true))) (c true)
      ==⟨ stepTrue5 ⟩
          tr (λ w → (g ∘ f) w == id w) (ap (λ x → ctp x) (! γ₁₀)) (c (neg true))
      ==⟨ ! stepTrue2 ⟩
         c (tr (λ x → P x) loop true)
      ∎
\end{code}

\begin{code}
  -- Def.
  cpath : PathOver (λ s → (b : P s) → g (f (s , b)) == s , b) loop c c
  cpath = funext-transport-dfun-r loop c c helper
\end{code}

And the homotopy is as follows:

\begin{code}
-- Homotopy
  -- Def. by Sigma induction. Step 1.
  g-f : g ∘ f ∼ id
  g-f (s , b) = g-f' s b
    where
      -- Def. by S¹ induction. Step 2.
      g-f' : (s : S¹) → (b : P s) → (g ∘ f) (s , b) == id (s , b)
      g-f' = S¹-ind (λ s → (b : P s) → (g ∘ f) (s , b) == id (s , b)) c cpath
\end{code}


Finally, the equivalence:

\begin{code}
  -- Equiv.
  ΣS¹P-≃-pS : Σ S¹ P ≃ pS
  ΣS¹P-≃-pS = qinv-≃ f (g , f-g , g-f)
\end{code}
